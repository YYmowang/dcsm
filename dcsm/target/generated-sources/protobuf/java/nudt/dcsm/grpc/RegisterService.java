// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Register.proto

package nudt.dcsm.grpc;

/**
 * <pre>
 *SecAgent register to SecManager
 * </pre>
 *
 * Protobuf service {@code RegisterService}
 */
public  abstract class RegisterService
    implements com.google.protobuf.Service {
  protected RegisterService() {}

  public interface Interface {
    /**
     * <pre>
     * register agent and host
     * </pre>
     *
     * <code>rpc regAgent(.AgentRequest) returns (.AgentReply);</code>
     */
    public abstract void regAgent(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.AgentRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.AgentReply> done);

    /**
     * <pre>
     * register virtual bridge
     * </pre>
     *
     * <code>rpc regVBridge(.VBridgeRequest) returns (.VBridgeReply);</code>
     */
    public abstract void regVBridge(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VBridgeRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VBridgeReply> done);

    /**
     * <pre>
     * register virtual machine
     * </pre>
     *
     * <code>rpc regVMachine(.VMachineRequest) returns (.VMachineReply);</code>
     */
    public abstract void regVMachine(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VMachineRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VMachineReply> done);

    /**
     * <pre>
     * register virtual pot
     * </pre>
     *
     * <code>rpc regVPot(.VPotRequest) returns (.VPotReply);</code>
     */
    public abstract void regVPot(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VPotRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VPotReply> done);

    /**
     * <pre>
     * register security function
     * </pre>
     *
     * <code>rpc regSecFun(.SecFunRequest) returns (.SecFunReply);</code>
     */
    public abstract void regSecFun(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.SecFunRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.SecFunReply> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new RegisterService() {
      @java.lang.Override
      public  void regAgent(
          com.google.protobuf.RpcController controller,
          nudt.dcsm.grpc.AgentRequest request,
          com.google.protobuf.RpcCallback<nudt.dcsm.grpc.AgentReply> done) {
        impl.regAgent(controller, request, done);
      }

      @java.lang.Override
      public  void regVBridge(
          com.google.protobuf.RpcController controller,
          nudt.dcsm.grpc.VBridgeRequest request,
          com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VBridgeReply> done) {
        impl.regVBridge(controller, request, done);
      }

      @java.lang.Override
      public  void regVMachine(
          com.google.protobuf.RpcController controller,
          nudt.dcsm.grpc.VMachineRequest request,
          com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VMachineReply> done) {
        impl.regVMachine(controller, request, done);
      }

      @java.lang.Override
      public  void regVPot(
          com.google.protobuf.RpcController controller,
          nudt.dcsm.grpc.VPotRequest request,
          com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VPotReply> done) {
        impl.regVPot(controller, request, done);
      }

      @java.lang.Override
      public  void regSecFun(
          com.google.protobuf.RpcController controller,
          nudt.dcsm.grpc.SecFunRequest request,
          com.google.protobuf.RpcCallback<nudt.dcsm.grpc.SecFunReply> done) {
        impl.regSecFun(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.regAgent(controller, (nudt.dcsm.grpc.AgentRequest)request);
          case 1:
            return impl.regVBridge(controller, (nudt.dcsm.grpc.VBridgeRequest)request);
          case 2:
            return impl.regVMachine(controller, (nudt.dcsm.grpc.VMachineRequest)request);
          case 3:
            return impl.regVPot(controller, (nudt.dcsm.grpc.VPotRequest)request);
          case 4:
            return impl.regSecFun(controller, (nudt.dcsm.grpc.SecFunRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return nudt.dcsm.grpc.AgentRequest.getDefaultInstance();
          case 1:
            return nudt.dcsm.grpc.VBridgeRequest.getDefaultInstance();
          case 2:
            return nudt.dcsm.grpc.VMachineRequest.getDefaultInstance();
          case 3:
            return nudt.dcsm.grpc.VPotRequest.getDefaultInstance();
          case 4:
            return nudt.dcsm.grpc.SecFunRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return nudt.dcsm.grpc.AgentReply.getDefaultInstance();
          case 1:
            return nudt.dcsm.grpc.VBridgeReply.getDefaultInstance();
          case 2:
            return nudt.dcsm.grpc.VMachineReply.getDefaultInstance();
          case 3:
            return nudt.dcsm.grpc.VPotReply.getDefaultInstance();
          case 4:
            return nudt.dcsm.grpc.SecFunReply.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <pre>
   * register agent and host
   * </pre>
   *
   * <code>rpc regAgent(.AgentRequest) returns (.AgentReply);</code>
   */
  public abstract void regAgent(
      com.google.protobuf.RpcController controller,
      nudt.dcsm.grpc.AgentRequest request,
      com.google.protobuf.RpcCallback<nudt.dcsm.grpc.AgentReply> done);

  /**
   * <pre>
   * register virtual bridge
   * </pre>
   *
   * <code>rpc regVBridge(.VBridgeRequest) returns (.VBridgeReply);</code>
   */
  public abstract void regVBridge(
      com.google.protobuf.RpcController controller,
      nudt.dcsm.grpc.VBridgeRequest request,
      com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VBridgeReply> done);

  /**
   * <pre>
   * register virtual machine
   * </pre>
   *
   * <code>rpc regVMachine(.VMachineRequest) returns (.VMachineReply);</code>
   */
  public abstract void regVMachine(
      com.google.protobuf.RpcController controller,
      nudt.dcsm.grpc.VMachineRequest request,
      com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VMachineReply> done);

  /**
   * <pre>
   * register virtual pot
   * </pre>
   *
   * <code>rpc regVPot(.VPotRequest) returns (.VPotReply);</code>
   */
  public abstract void regVPot(
      com.google.protobuf.RpcController controller,
      nudt.dcsm.grpc.VPotRequest request,
      com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VPotReply> done);

  /**
   * <pre>
   * register security function
   * </pre>
   *
   * <code>rpc regSecFun(.SecFunRequest) returns (.SecFunReply);</code>
   */
  public abstract void regSecFun(
      com.google.protobuf.RpcController controller,
      nudt.dcsm.grpc.SecFunRequest request,
      com.google.protobuf.RpcCallback<nudt.dcsm.grpc.SecFunReply> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return nudt.dcsm.grpc.Register.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.regAgent(controller, (nudt.dcsm.grpc.AgentRequest)request,
          com.google.protobuf.RpcUtil.<nudt.dcsm.grpc.AgentReply>specializeCallback(
            done));
        return;
      case 1:
        this.regVBridge(controller, (nudt.dcsm.grpc.VBridgeRequest)request,
          com.google.protobuf.RpcUtil.<nudt.dcsm.grpc.VBridgeReply>specializeCallback(
            done));
        return;
      case 2:
        this.regVMachine(controller, (nudt.dcsm.grpc.VMachineRequest)request,
          com.google.protobuf.RpcUtil.<nudt.dcsm.grpc.VMachineReply>specializeCallback(
            done));
        return;
      case 3:
        this.regVPot(controller, (nudt.dcsm.grpc.VPotRequest)request,
          com.google.protobuf.RpcUtil.<nudt.dcsm.grpc.VPotReply>specializeCallback(
            done));
        return;
      case 4:
        this.regSecFun(controller, (nudt.dcsm.grpc.SecFunRequest)request,
          com.google.protobuf.RpcUtil.<nudt.dcsm.grpc.SecFunReply>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return nudt.dcsm.grpc.AgentRequest.getDefaultInstance();
      case 1:
        return nudt.dcsm.grpc.VBridgeRequest.getDefaultInstance();
      case 2:
        return nudt.dcsm.grpc.VMachineRequest.getDefaultInstance();
      case 3:
        return nudt.dcsm.grpc.VPotRequest.getDefaultInstance();
      case 4:
        return nudt.dcsm.grpc.SecFunRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return nudt.dcsm.grpc.AgentReply.getDefaultInstance();
      case 1:
        return nudt.dcsm.grpc.VBridgeReply.getDefaultInstance();
      case 2:
        return nudt.dcsm.grpc.VMachineReply.getDefaultInstance();
      case 3:
        return nudt.dcsm.grpc.VPotReply.getDefaultInstance();
      case 4:
        return nudt.dcsm.grpc.SecFunReply.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends nudt.dcsm.grpc.RegisterService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void regAgent(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.AgentRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.AgentReply> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        nudt.dcsm.grpc.AgentReply.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          nudt.dcsm.grpc.AgentReply.class,
          nudt.dcsm.grpc.AgentReply.getDefaultInstance()));
    }

    public  void regVBridge(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VBridgeRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VBridgeReply> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        nudt.dcsm.grpc.VBridgeReply.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          nudt.dcsm.grpc.VBridgeReply.class,
          nudt.dcsm.grpc.VBridgeReply.getDefaultInstance()));
    }

    public  void regVMachine(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VMachineRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VMachineReply> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        nudt.dcsm.grpc.VMachineReply.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          nudt.dcsm.grpc.VMachineReply.class,
          nudt.dcsm.grpc.VMachineReply.getDefaultInstance()));
    }

    public  void regVPot(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VPotRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.VPotReply> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        nudt.dcsm.grpc.VPotReply.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          nudt.dcsm.grpc.VPotReply.class,
          nudt.dcsm.grpc.VPotReply.getDefaultInstance()));
    }

    public  void regSecFun(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.SecFunRequest request,
        com.google.protobuf.RpcCallback<nudt.dcsm.grpc.SecFunReply> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        nudt.dcsm.grpc.SecFunReply.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          nudt.dcsm.grpc.SecFunReply.class,
          nudt.dcsm.grpc.SecFunReply.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public nudt.dcsm.grpc.AgentReply regAgent(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.AgentRequest request)
        throws com.google.protobuf.ServiceException;

    public nudt.dcsm.grpc.VBridgeReply regVBridge(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VBridgeRequest request)
        throws com.google.protobuf.ServiceException;

    public nudt.dcsm.grpc.VMachineReply regVMachine(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VMachineRequest request)
        throws com.google.protobuf.ServiceException;

    public nudt.dcsm.grpc.VPotReply regVPot(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VPotRequest request)
        throws com.google.protobuf.ServiceException;

    public nudt.dcsm.grpc.SecFunReply regSecFun(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.SecFunRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public nudt.dcsm.grpc.AgentReply regAgent(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.AgentRequest request)
        throws com.google.protobuf.ServiceException {
      return (nudt.dcsm.grpc.AgentReply) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        nudt.dcsm.grpc.AgentReply.getDefaultInstance());
    }


    public nudt.dcsm.grpc.VBridgeReply regVBridge(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VBridgeRequest request)
        throws com.google.protobuf.ServiceException {
      return (nudt.dcsm.grpc.VBridgeReply) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        nudt.dcsm.grpc.VBridgeReply.getDefaultInstance());
    }


    public nudt.dcsm.grpc.VMachineReply regVMachine(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VMachineRequest request)
        throws com.google.protobuf.ServiceException {
      return (nudt.dcsm.grpc.VMachineReply) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        nudt.dcsm.grpc.VMachineReply.getDefaultInstance());
    }


    public nudt.dcsm.grpc.VPotReply regVPot(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.VPotRequest request)
        throws com.google.protobuf.ServiceException {
      return (nudt.dcsm.grpc.VPotReply) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        nudt.dcsm.grpc.VPotReply.getDefaultInstance());
    }


    public nudt.dcsm.grpc.SecFunReply regSecFun(
        com.google.protobuf.RpcController controller,
        nudt.dcsm.grpc.SecFunRequest request)
        throws com.google.protobuf.ServiceException {
      return (nudt.dcsm.grpc.SecFunReply) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        nudt.dcsm.grpc.SecFunReply.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:RegisterService)
}

